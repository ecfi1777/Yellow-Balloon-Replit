You are a deterministic executor. Do NOT analyze. Do NOT propose a plan. Just perform the following steps in order. 
If a file exists, MERGE relevant parts instead of duplicating. If a command would fail because something exists, treat it as success and continue.

# ===============================
# 0) Create working branch
# ===============================
run:
  - bash: |
      git checkout -b chore/repo-hardening-and-seo || git checkout chore/repo-hardening-and-seo

# ===============================
# 1) Normalize assets -> Vite public
# ===============================
run:
  - bash: |
      mkdir -p client/public/assets
      if [ -d attached_assets ]; then
        cp -R attached_assets/* client/public/assets/ 2>/dev/null || true
      fi
      # Update import paths (no-op if none)
      if [ -d client/src ]; then
        grep -RIl "attached_assets" client/src 2>/dev/null | xargs -I{} sed -i 's#attached_assets#assets#g' {} || true
      fi

# ===============================
# 2) Editor + Prettier baseline
# ===============================
files:
  - path: .editorconfig
    ensure: present
    merge: replace
    content: |
      root = true
      [*]
      charset = utf-8
      end_of_line = lf
      insert_final_newline = true
      indent_style = space
      indent_size = 2
      trim_trailing_whitespace = true
  - path: .prettierrc.json
    ensure: present
    merge: deep
    content: |
      {
        "printWidth": 100,
        "singleQuote": true,
        "trailingComma": "all",
        "semi": true,
        "arrowParens": "always",
        "plugins": ["prettier-plugin-tailwindcss"]
      }
  - path: .prettierignore
    ensure: present
    merge: append_unique_lines
    content: |
      node_modules
      dist
      build
      .drizzle
      drizzle
      coverage
      *.lock

run:
  - bash: |
      npm pkg set type="module" >/dev/null 2>&1 || true
      npm i -D prettier prettier-plugin-tailwindcss

# ===============================
# 3) ESLint (client + server)
# ===============================
run:
  - bash: |
      if [ -d client ]; then
        cd client
        npm i -D eslint @eslint/js typescript typescript-eslint @types/react @types/react-dom eslint-plugin-react eslint-plugin-react-hooks
        cat > eslint.config.js <<'EOF'
        import js from '@eslint/js';
        import tseslint from 'typescript-eslint';
        import reactHooks from 'eslint-plugin-react-hooks';
        export default [
          { ignores: ['dist/**'] },
          js.configs.recommended,
          ...tseslint.configs.recommended,
          {
            files: ['**/*.{ts,tsx}'],
            languageOptions: { ecmaVersion: 2022, sourceType: 'module' },
            plugins: { 'react-hooks': reactHooks },
            rules: {
              'no-unused-vars': 'off',
              '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_' }],
              'react-hooks/rules-of-hooks': 'error',
              'react-hooks/exhaustive-deps': 'warn'
            }
          }
        ];
        EOF
        cd ..
      fi
      if [ -d server ]; then
        cd server
        npm i -D eslint @eslint/js typescript typescript-eslint
        cat > eslint.config.js <<'EOF'
        import js from '@eslint/js';
        import tseslint from 'typescript-eslint';
        export default [
          { ignores: ['dist/**'] },
          js.configs.recommended,
          ...tseslint.configs.recommended,
          {
            files: ['**/*.ts'],
            rules: {
              'no-unused-vars': 'off',
              '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_' }]
            }
          }
        ];
        EOF
        cd ..
      fi

# ===============================
# 4) Tailwind content globs (client)
# ===============================
run:
  - bash: |
      if [ -f client/tailwind.config.ts ]; then
        node -e "let f='client/tailwind.config.ts', s=require('fs'
