You are a deterministic executor. Do NOT analyze. Do NOT propose a plan. Execute steps. If something already exists, treat as success and continue.

# 1) Confirm .replit has the correct deployment shape (leave as-is if already correct)
run:
  - bash: |
      if [ -f .replit ]; then
        echo ".replit exists:"
        cat .replit
      else
        cat > .replit <<'EOF'
run = "npm run dev"

[deployment]
deploymentTarget = "autoscale"
build = ["npm", "run", "build"]
run = ["npm", "run", "start"]
EOF
        echo "Created .replit with dev + autoscale deployment."
      fi

# 2) Check package scripts exist (no overwriteâ€”just report)
run:
  - bash: |
      echo "Root package.json (for visibility only if present):"
      [ -f package.json ] && cat package.json || echo "(no root package.json)"
      echo "client/package.json:"
      [ -f client/package.json ] && cat client/package.json || echo "(missing)"
      echo "server/package.json:"
      [ -f server/package.json ] && cat server/package.json || echo "(missing)"

# 3) Ensure the server binds to 0.0.0.0 and process.env.PORT (patch TypeScript entry if needed)
run:
  - bash: |
    # Try common server entry points in TypeScript
    for f in server/src/index.ts server/src/server.ts server/src/app.ts; do
      if [ -f "$f" ]; then
        node -e "let p='$f',s=require('fs').readFileSync(p,'utf8');
          if(!/process\\.env\\.PORT/.test(s)||!/0\\.0\\.0\\.0/.test(s)){
            s = s.replace(/app\\.listen\\(([^)]*)\\)/, (m)=>m.includes('process.env.PORT')?m:m.replace(/app\\.listen\\(/, \"app.listen(Number(process.env.PORT)||3000, '0.0.0.0', \"));
            if(!/app\\.listen\\(Number\\(process\\.env\\.PORT\\)\\|\\|3000, '0\\.0\\.0\\.0'/.test(s)){
              s += \"\\nconst port=Number(process.env.PORT)||3000; app.listen(port,'0.0.0.0',()=>console.log('Listening on',port));\\n\";
            }
            require('fs').writeFileSync(p,s);
            console.log('Patched server bind in', p);
          } else {
            console.log('Server already binds to $PORT in', p);
          }"
        break
      fi
    done

# 4) Ensure production serves the built SPA and has a SPA fallback to index.html
run:
  - bash: |
    # Add minimal static serving if not present (Express + TS). We only append if we detect Express.
    if [ -f server/src/index.ts ]; then
      node -e "const fs=require('fs');let p='server/src/index.ts',s=fs.readFileSync(p,'utf8');
        const hasExpress=/from 'express'/.test(s)||/require\\(['\"]express['\"]\\)/.test(s);
        if(hasExpress && !/express\\.static\\(.*client\\/dist/.test(s)){
          const inject = `
import path from 'path';
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const clientDist = path.resolve(__dirname, '../../client/dist');
app.use(require('express').static(clientDist));
app.get('*', (_req, res) => res.sendFile(path.join(clientDist, 'index.html')));
`;
          if(/const app = /.test(s)){
            s=s.replace(/const app = [\\s\\S]*?;\\n/, (m)=>m+inject);
          } else {
            s+=inject;
          }
          fs.writeFileSync(p,s);
          console.log('Added static serving + SPA fallback to', p);
        } else {
          console.log('Static serving already configured or Express not detected in server/src/index.ts');
        }"
    fi

# 5) Build and start (sanity check)
run:
  - bash: |
      npm run build || true
      echo "=== Build finished. If deployment still fails, check the Replit Console logs ==="
